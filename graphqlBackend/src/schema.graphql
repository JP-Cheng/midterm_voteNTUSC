type Query {
  users(query: String): [User]!
  user(uid: ID!): User!
  elections(query: String): [Election]!
  election(electionId: ID!): Election!
  ballots(electionId: ID!): [Ballot]!
  ballot(ballotId: ID!):  Ballot
  me: User!
  
}

type Mutation {
  createUser(name: String!, email: String!, pwd: String!): User!
  deleteUser: User!
  updateUser(name: String, email: String, pwd: String): User!
  createElection(data: CreateElectionInput!): Election!
  deleteElection(id: ID!): ID!
  updateElection(id: ID!, data: UpdateElectionInput!): Election!
  createBallot(data: CreateBallotInput!): Ballot!
  login(email: String!, pwd: String!): Token!
}

type Subscription {
  ballots(electionId: ID!): BallotsSubscriptionPayload!
  elections: ElectionsSubscriptionPayload!
}


input CreateElectionInput {
  title: String!
  body: String!
  choices: [String!]!
  open: Boolean!
  voters: [ID!]!
}

input UpdateElectionInput {
  title: String
  body: String
  choices: [String!]
  open: Boolean
  voters: [ID!]
}

input CreateBallotInput {
  electionId: ID!
  choice: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  createdElections: [Election]!
  voteableElections: [Election]!
  votedElections: [Election]!
}

type Election {
  id: ID!
  title: String!
  body: String!
  choices: [String!]!
  creator: User!
  open: Boolean!
  ballots: [Ballot]!
  voters: [User!]!
  voted: [User]!
}

type Ballot {
  id: ID!
  election: Election!
  choice: Int!
}

type Token {
  token: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ElectionsSubscriptionPayload {
  mutation: MutationType!
  electionId: ID!
  data: Election
}

type BallotsSubscriptionPayload {
  mutation: MutationType!
  data: Ballot!
}