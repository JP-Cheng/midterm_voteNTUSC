type Query {
  users(query: String): [User]!
  user(uid: ID!): User!
  elections(query: String): [Election]!
  election(electionId: ID!): Election!
  twoStageElections(query: String): [TwoStageElection]!
  twoStageElection(query: ID!): TwoStageElection!
  allElections(query: String): [generalElection]!
  ballots(electionId: ID!): [Ballot]!
  ballot(ballotId: ID!):  Ballot
  commitments(electionId: ID!): [Commitment]!
  commitment(commitmentId: ID!): Commitment
  openings(electionId: ID!): [Opening]!
  opening(openingId: ID!): Opening
  me: User!
}

type Mutation {
  createUser(name: String!, email: String!, pwd: String!): User!
  deleteUser: User!
  updateUser(name: String, email: String, pwd: String): User!
  createGeneralElection(data: CreateGeneralElectionInput!): generalElection!
  createElection(data: CreateElectionInput!): Election!
  deleteElection(id: ID!): ID!
  updateElection(id: ID!): Election!
  createTwoStageElection(data: CreateTwoStageElectionInput!): TwoStageElection!
  deleteTwoStageElection(id: ID!): ID!
  updateTwoStageElection(id: ID!): TwoStageElection!
  createBallot(data: CreateBallotInput!): Ballot!
  createCommitment(data: CreateCommitmentInput!): Commitment!
  createOpening(data: CreateOpeningInput!): Opening!
  login(email: String!, pwd: String!): Token!
}

type Subscription {
  ballots(electionId: ID!): BallotsSubscriptionPayload!
  commitments(electionId: ID!): CommitmentsSubscriptionPayload!
  openings(electionId: ID!): OpeningsSubscriptionPayload!
  elections: ElectionsSubscriptionPayload!
  twoStageElections: TwoStageElectionsSubscriptionPayload!
}

input CreateGeneralElectionInput {
  type: String!
  title: String!
  body: String!
  choices: [String!]!
  open: Boolean!
  voters: [ID!]!
}

input CreateElectionInput {
  title: String!
  body: String!
  choices: [String!]!
  open: Boolean!
  voters: [ID!]!
}

input UpdateElectionInput {
  title: String
  body: String
  choices: [String!]
  open: Boolean
  voters: [ID!]
}

input CreateTwoStageElectionInput {
  title: String!
  body: String!
  choices: [String!]!
  state: String!
  voters: [ID!]!
}

input CreateBallotInput {
  electionId: ID!
  choice: Int!
}

input CreateCommitmentInput {
  twoStageElectionId: ID!
  commitment: String!
}

input CreateOpeningInput {
  twoStageElectionId: ID!
  hashedSecret: String!
  choice: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  createdGeneralElections: [generalElection]!
  votableGeneralElections: [generalElection]!
  votedGeneralElections: [generalElection]!
  createdElections: [Election]!
  voteableElections: [Election]!
  votedElections: [Election]!
  createdTwoStageElections: [TwoStageElection]!
  voteableTwoStageElections: [TwoStageElection]!
  votedTwoStageElections: [TwoStageElection]!
}

type Election {
  id: ID!
  title: String!
  body: String!
  choices: [String!]!
  creator: User!
  open: Boolean!
  ballots: [Ballot]!
  voters: [User!]!
  voted: [User]!
}

type TwoStageElection {
  id: ID!
  title: String!
  body: String!
  choices: [String!]!
  creator: User!
  state: String!
  commitments: [Commitment]!
  openings: [Opening]!
  ballots: [Ballot]!
  voters: [User!]!
  voted: [User]!
}

type generalElection {
  type: String!
  simpleElection: Election
  twoStageElection: TwoStageElection
}

type Ballot {
  id: ID!
  election: Election!
  choice: Int!
}

type Commitment {
  id: ID!
  election: TwoStageElection!
  commitment: String!
}

type Opening {
  id: ID!
  election: TwoStageElection!
  hashedChoice: String!
  hashedSecret: String!
}

type Token {
  token: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ElectionsSubscriptionPayload {
  mutation: MutationType!
  electionId: ID!
  data: Election
}

type TwoStageElectionsSubscriptionPayload {
  mutation: MutationType!
  electionId: ID!
  data: TwoStageElection
}

type CommitmentsSubscriptionPayload {
  mutation: MutationType!
  data: Commitment!
}

type OpeningsSubscriptionPayload {
  mutation: MutationType!
  data: Opening!
}

type BallotsSubscriptionPayload {
  mutation: MutationType!
  data: Ballot!
}